/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "mutation Auth_firebaseLogin($input: Auth_FirebaseLoginInput!) {\n  auth_firebaseLogin(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}": typeof types.Auth_FirebaseLoginDocument,
    "mutation BankAccount_delete($input: BankAccount_DeleteInput!) {\n  bankAccount_delete(input: $input) {\n    message\n  }\n}\n\nmutation BankAccount_create($input: BankAccount_CreateInput!) {\n  bankAccount_create(input: $input) {\n    id\n    account_no\n    account_name\n    bank_name\n  }\n}\n\nquery BankAccount_getAll {\n  bankAccount_getAll {\n    id\n    account_name\n    account_no\n    bank_name\n    bankCode\n  }\n}\n\nquery BankList {\n  bankList {\n    bankCode\n    bankName\n  }\n}\n\nquery Bank_verifyAccountNo($input: BankGetAccountName_Input!) {\n  bank_verifyAccountNo(input: $input) {\n    account_name\n    account_number\n  }\n}": typeof types.BankAccount_DeleteDocument,
    "query FxRate_GetAll {\n  fxRate_GetAll {\n    GH\n    NG\n    KE\n    UG\n    MW\n    TZ\n    ZA\n    USD\n    EUR\n  }\n}": typeof types.FxRate_GetAllDocument,
    "mutation Kyc_addAddressInfo($input: Kyc_AddAddressInfoInput!) {\n  kyc_addAddressInfo(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addAddressProof($input: Kyc_AddAddressProofInput!) {\n  kyc_addAddressProof(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addBvnNin($input: Kyc_AddBvnNinInput!) {\n  kyc_addBvnNin(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addNames($input: Kyc_AddNamesInput!) {\n  kyc_addNames(input: $input) {\n    message\n  }\n}\n\nmutation kyc_createTransactionPin($input: Kyc_CreateTransactionPinInput!) {\n  kyc_createTransactionPin(input: $input) {\n    message\n  }\n}\n\nmutation kyc_sendPhoneOtp($input: Kyc_SendPhoneOtpInput!) {\n  kyc_sendPhoneOtp(input: $input) {\n    message\n    otpToken\n  }\n}\n\nmutation Kyc_verifyPhoneOtp($input: Kyc_verifyPhoneOtpAndInput!) {\n  Kyc_verifyPhoneOtp(input: $input) {\n    message\n  }\n}\n\nquery kyc_profile {\n  kyc_profile {\n    bvn\n    bvn_status\n    nin\n    nin_status\n    middlename\n    gender\n    lastname\n    firstname\n    country_code\n    dob\n    email\n    phone\n    role\n    state\n  }\n}": typeof types.Kyc_AddAddressInfoDocument,
    "mutation onchain_transferToken($input: Onchain_TransferTokenInput!) {\n  onchain_transferToken(input: $input) {\n    message\n  }\n}": typeof types.Onchain_TransferTokenDocument,
    "mutation Orders_CreateSell($input: Order_CreteSellInput!) {\n  orders_CreateSell(input: $input) {\n    message\n  }\n}\n\nquery Orders_GetAll($input: Order_GetAllInput!) {\n  orders_GetAll(input: $input) {\n    id\n    action_user\n    status\n    bank_id\n    currency_fiat\n    status\n    trade_type\n    action_user\n    action_merchant\n    amount_crypto\n    amount_fiat\n  }\n}\n\nmutation Orders_CreateBuy($input: Order_CreteBuyInput!) {\n  orders_CreateBuy(input: $input) {\n    message\n  }\n}\n\nquery orders_GetTransferAccount {\n  orders_GetTransferAccount {\n    bankName\n    accountNo\n    accountName\n  }\n}": typeof types.Orders_CreateSellDocument,
    "query static_getTokens {\n  static_getTokens {\n    name\n    address\n    decimals\n    isBuyable\n    isPayable\n    symbol\n    logoUrl\n    chainId\n    priceUSD\n    priceNGN\n    rpcUrl\n    chainName\n  }\n}\n\nquery static_getLinks {\n  static_getLinks {\n    title\n    desc\n    imgLink\n    url\n    category\n    group\n  }\n}\n\nquery static_getCountry {\n  static_getCountries {\n    name\n    isoName\n    callingCodes\n    continent\n    currencyCode\n    currencyName\n    currencySymbol\n    flag\n  }\n}\n\nquery static_getChain {\n  static_getChains {\n    name\n    rpcUrl\n    chainId\n    explorerUrl\n    explorerApiUrl\n    logoUrl\n  }\n}\n\nquery static_getFundCollectors {\n  static_getFundCollectors {\n    TopUp\n    ElectricityBills\n    FundBetting\n    OffRamping\n    TV_Bills\n    WaterBills\n  }\n}\n\nquery static_appInfo {\n  static_appInfo {\n    androidAppUrl\n    iosAppUrl\n    minBuild\n    deployedBuild\n    enableAirtime\n    enableBetting\n    enableDataPlan\n    enableElectricityBillPayment\n    enableTVBillPayment\n    selfKycUrl\n    transactionsPageUrl\n    notificationsPageUrl\n  }\n}\n\nquery static_secretQuestions {\n  static_secretQuestions {\n    text\n  }\n}\n\nquery static_miniApps {\n  static_miniApps {\n    title\n    description\n    logo\n    url\n    aboutInfo\n  }\n}": typeof types.Static_GetTokensDocument,
    "query utility_getTopUpOperators($input: Utilities_GetOperatorsInput!) {\n  utility_getTopUpOperators(input: $input) {\n    airtime {\n      name\n      suggestedAmounts\n      logo\n      maxAmount\n      minAmount\n      operatorId\n    }\n    dataPlan {\n      name\n      logo\n      operatorId\n      plans {\n        amount\n        desc\n      }\n    }\n    dataBundles {\n      name\n      logo\n      operatorId\n      plans {\n        amount\n        desc\n      }\n    }\n  }\n}": typeof types.Utility_GetTopUpOperatorsDocument,
    "query Transactions_getAll {\n  transactions_getAll {\n    amount\n    category\n    mode\n    note\n    transaction_hash\n    status\n  }\n}": typeof types.Transactions_GetAllDocument,
    "query User_getAll {\n  user_getAll {\n    telegram_id\n    id\n    country_code\n    phone\n    firstname\n    lastname\n    middlename\n    email\n  }\n}\n\nquery user_get {\n  user_get {\n    firstname\n    lastname\n    middlename\n    email\n    country_code\n    phone\n    bvn\n    bvn_status\n    nin\n    nin_status\n    state\n    dob\n    dob_status\n    home_address\n  }\n}": typeof types.User_GetAllDocument,
    "mutation Utility_purchaseAirtime($input: Utilities_PurchaseAirtimeInput!) {\n  utility_purchaseAirtime(input: $input) {\n    title\n    subtitle\n  }\n}\n\nmutation Utility_purchaseDataBundle($input: Utilities_PurchaseDataBundleInput!) {\n  utility_purchaseDataBundle(input: $input) {\n    title\n    subtitle\n  }\n}\n\nquery ElectricityBill_getProviders($input: ElectricityBill_ProviderInput!) {\n  electricityBill_getProviders(input: $input) {\n    name\n    logo\n    category\n  }\n}\n\nmutation ElectricityBill_verifyAccount($input: ElectricityBill_ValidateAccountInput!) {\n  electricityBill_verifyAccount(input: $input) {\n    customerAddress\n    customerName\n    meterNumber\n    meterType\n    minimuVendAmount\n  }\n}\n\nmutation ElectricityBill_makePayment($input: ElectricityBill_PaymentInput!) {\n  electricityBill_makePayment(input: $input) {\n    amount\n    biller\n    bonusToken\n    chargedAmount\n    commission\n    customerId\n    transactionDate\n    unit\n  }\n}\n\nquery tvBills_getProviders($input: TvBill_GetTVProvidersInput!) {\n  tvBills_getProviders(input: $input) {\n    logo\n    category\n    name\n    slug\n  }\n}\n\nquery tvBills_getBouquet($input: TvBill_GetTVBouquetInput!) {\n  tvBills_getBouquet(input: $input) {\n    code\n    description\n    price\n  }\n}\n\nmutation tvBills_validateAccount($input: TvBill_ValidateAccountInput!) {\n  tvBills_validateAccount(input: $input) {\n    customerName\n    service\n    smartCardNumber\n  }\n}\n\nmutation tvBills_makePayment($input: TvBill_PaymentInput!) {\n  tvBills_makePayment(input: $input) {\n    amount\n    biller\n    commission\n    customerId\n    transactionId\n    transactionDate\n    customerId\n  }\n}\n\nquery fundBetting_getProviders($input: BettingProvidersInput!) {\n  fundBetting_getProviders(input: $input) {\n    logo\n    name\n  }\n}\n\nquery fundBetting_getPriceList($input: BettingProvidersInput!) {\n  fundBetting_getPriceList(input: $input) {\n    amount\n  }\n}\n\nmutation fundBetting_makePayment($input: BettingPaymentInput!) {\n  fundBetting_makePayment(input: $input) {\n    amount\n    customer_name\n    customer_username\n    customer_phone_number\n    customer_email_address\n    order_id\n    service_name\n    request_id\n  }\n}": typeof types.Utility_PurchaseAirtimeDocument,
    "mutation WalletCrypto_create {\n  walletCrypto_create {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}\n\nquery WalletCrypto_getAll {\n  walletCrypto_getAll {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}\n\nmutation WalletCrypto_mobileCreate($input: Wallet_CreateInput!) {\n  walletCrypto_mobileCreate(input: $input) {\n    message\n  }\n}": typeof types.WalletCrypto_CreateDocument,
};
const documents: Documents = {
    "mutation Auth_firebaseLogin($input: Auth_FirebaseLoginInput!) {\n  auth_firebaseLogin(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}": types.Auth_FirebaseLoginDocument,
    "mutation BankAccount_delete($input: BankAccount_DeleteInput!) {\n  bankAccount_delete(input: $input) {\n    message\n  }\n}\n\nmutation BankAccount_create($input: BankAccount_CreateInput!) {\n  bankAccount_create(input: $input) {\n    id\n    account_no\n    account_name\n    bank_name\n  }\n}\n\nquery BankAccount_getAll {\n  bankAccount_getAll {\n    id\n    account_name\n    account_no\n    bank_name\n    bankCode\n  }\n}\n\nquery BankList {\n  bankList {\n    bankCode\n    bankName\n  }\n}\n\nquery Bank_verifyAccountNo($input: BankGetAccountName_Input!) {\n  bank_verifyAccountNo(input: $input) {\n    account_name\n    account_number\n  }\n}": types.BankAccount_DeleteDocument,
    "query FxRate_GetAll {\n  fxRate_GetAll {\n    GH\n    NG\n    KE\n    UG\n    MW\n    TZ\n    ZA\n    USD\n    EUR\n  }\n}": types.FxRate_GetAllDocument,
    "mutation Kyc_addAddressInfo($input: Kyc_AddAddressInfoInput!) {\n  kyc_addAddressInfo(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addAddressProof($input: Kyc_AddAddressProofInput!) {\n  kyc_addAddressProof(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addBvnNin($input: Kyc_AddBvnNinInput!) {\n  kyc_addBvnNin(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addNames($input: Kyc_AddNamesInput!) {\n  kyc_addNames(input: $input) {\n    message\n  }\n}\n\nmutation kyc_createTransactionPin($input: Kyc_CreateTransactionPinInput!) {\n  kyc_createTransactionPin(input: $input) {\n    message\n  }\n}\n\nmutation kyc_sendPhoneOtp($input: Kyc_SendPhoneOtpInput!) {\n  kyc_sendPhoneOtp(input: $input) {\n    message\n    otpToken\n  }\n}\n\nmutation Kyc_verifyPhoneOtp($input: Kyc_verifyPhoneOtpAndInput!) {\n  Kyc_verifyPhoneOtp(input: $input) {\n    message\n  }\n}\n\nquery kyc_profile {\n  kyc_profile {\n    bvn\n    bvn_status\n    nin\n    nin_status\n    middlename\n    gender\n    lastname\n    firstname\n    country_code\n    dob\n    email\n    phone\n    role\n    state\n  }\n}": types.Kyc_AddAddressInfoDocument,
    "mutation onchain_transferToken($input: Onchain_TransferTokenInput!) {\n  onchain_transferToken(input: $input) {\n    message\n  }\n}": types.Onchain_TransferTokenDocument,
    "mutation Orders_CreateSell($input: Order_CreteSellInput!) {\n  orders_CreateSell(input: $input) {\n    message\n  }\n}\n\nquery Orders_GetAll($input: Order_GetAllInput!) {\n  orders_GetAll(input: $input) {\n    id\n    action_user\n    status\n    bank_id\n    currency_fiat\n    status\n    trade_type\n    action_user\n    action_merchant\n    amount_crypto\n    amount_fiat\n  }\n}\n\nmutation Orders_CreateBuy($input: Order_CreteBuyInput!) {\n  orders_CreateBuy(input: $input) {\n    message\n  }\n}\n\nquery orders_GetTransferAccount {\n  orders_GetTransferAccount {\n    bankName\n    accountNo\n    accountName\n  }\n}": types.Orders_CreateSellDocument,
    "query static_getTokens {\n  static_getTokens {\n    name\n    address\n    decimals\n    isBuyable\n    isPayable\n    symbol\n    logoUrl\n    chainId\n    priceUSD\n    priceNGN\n    rpcUrl\n    chainName\n  }\n}\n\nquery static_getLinks {\n  static_getLinks {\n    title\n    desc\n    imgLink\n    url\n    category\n    group\n  }\n}\n\nquery static_getCountry {\n  static_getCountries {\n    name\n    isoName\n    callingCodes\n    continent\n    currencyCode\n    currencyName\n    currencySymbol\n    flag\n  }\n}\n\nquery static_getChain {\n  static_getChains {\n    name\n    rpcUrl\n    chainId\n    explorerUrl\n    explorerApiUrl\n    logoUrl\n  }\n}\n\nquery static_getFundCollectors {\n  static_getFundCollectors {\n    TopUp\n    ElectricityBills\n    FundBetting\n    OffRamping\n    TV_Bills\n    WaterBills\n  }\n}\n\nquery static_appInfo {\n  static_appInfo {\n    androidAppUrl\n    iosAppUrl\n    minBuild\n    deployedBuild\n    enableAirtime\n    enableBetting\n    enableDataPlan\n    enableElectricityBillPayment\n    enableTVBillPayment\n    selfKycUrl\n    transactionsPageUrl\n    notificationsPageUrl\n  }\n}\n\nquery static_secretQuestions {\n  static_secretQuestions {\n    text\n  }\n}\n\nquery static_miniApps {\n  static_miniApps {\n    title\n    description\n    logo\n    url\n    aboutInfo\n  }\n}": types.Static_GetTokensDocument,
    "query utility_getTopUpOperators($input: Utilities_GetOperatorsInput!) {\n  utility_getTopUpOperators(input: $input) {\n    airtime {\n      name\n      suggestedAmounts\n      logo\n      maxAmount\n      minAmount\n      operatorId\n    }\n    dataPlan {\n      name\n      logo\n      operatorId\n      plans {\n        amount\n        desc\n      }\n    }\n    dataBundles {\n      name\n      logo\n      operatorId\n      plans {\n        amount\n        desc\n      }\n    }\n  }\n}": types.Utility_GetTopUpOperatorsDocument,
    "query Transactions_getAll {\n  transactions_getAll {\n    amount\n    category\n    mode\n    note\n    transaction_hash\n    status\n  }\n}": types.Transactions_GetAllDocument,
    "query User_getAll {\n  user_getAll {\n    telegram_id\n    id\n    country_code\n    phone\n    firstname\n    lastname\n    middlename\n    email\n  }\n}\n\nquery user_get {\n  user_get {\n    firstname\n    lastname\n    middlename\n    email\n    country_code\n    phone\n    bvn\n    bvn_status\n    nin\n    nin_status\n    state\n    dob\n    dob_status\n    home_address\n  }\n}": types.User_GetAllDocument,
    "mutation Utility_purchaseAirtime($input: Utilities_PurchaseAirtimeInput!) {\n  utility_purchaseAirtime(input: $input) {\n    title\n    subtitle\n  }\n}\n\nmutation Utility_purchaseDataBundle($input: Utilities_PurchaseDataBundleInput!) {\n  utility_purchaseDataBundle(input: $input) {\n    title\n    subtitle\n  }\n}\n\nquery ElectricityBill_getProviders($input: ElectricityBill_ProviderInput!) {\n  electricityBill_getProviders(input: $input) {\n    name\n    logo\n    category\n  }\n}\n\nmutation ElectricityBill_verifyAccount($input: ElectricityBill_ValidateAccountInput!) {\n  electricityBill_verifyAccount(input: $input) {\n    customerAddress\n    customerName\n    meterNumber\n    meterType\n    minimuVendAmount\n  }\n}\n\nmutation ElectricityBill_makePayment($input: ElectricityBill_PaymentInput!) {\n  electricityBill_makePayment(input: $input) {\n    amount\n    biller\n    bonusToken\n    chargedAmount\n    commission\n    customerId\n    transactionDate\n    unit\n  }\n}\n\nquery tvBills_getProviders($input: TvBill_GetTVProvidersInput!) {\n  tvBills_getProviders(input: $input) {\n    logo\n    category\n    name\n    slug\n  }\n}\n\nquery tvBills_getBouquet($input: TvBill_GetTVBouquetInput!) {\n  tvBills_getBouquet(input: $input) {\n    code\n    description\n    price\n  }\n}\n\nmutation tvBills_validateAccount($input: TvBill_ValidateAccountInput!) {\n  tvBills_validateAccount(input: $input) {\n    customerName\n    service\n    smartCardNumber\n  }\n}\n\nmutation tvBills_makePayment($input: TvBill_PaymentInput!) {\n  tvBills_makePayment(input: $input) {\n    amount\n    biller\n    commission\n    customerId\n    transactionId\n    transactionDate\n    customerId\n  }\n}\n\nquery fundBetting_getProviders($input: BettingProvidersInput!) {\n  fundBetting_getProviders(input: $input) {\n    logo\n    name\n  }\n}\n\nquery fundBetting_getPriceList($input: BettingProvidersInput!) {\n  fundBetting_getPriceList(input: $input) {\n    amount\n  }\n}\n\nmutation fundBetting_makePayment($input: BettingPaymentInput!) {\n  fundBetting_makePayment(input: $input) {\n    amount\n    customer_name\n    customer_username\n    customer_phone_number\n    customer_email_address\n    order_id\n    service_name\n    request_id\n  }\n}": types.Utility_PurchaseAirtimeDocument,
    "mutation WalletCrypto_create {\n  walletCrypto_create {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}\n\nquery WalletCrypto_getAll {\n  walletCrypto_getAll {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}\n\nmutation WalletCrypto_mobileCreate($input: Wallet_CreateInput!) {\n  walletCrypto_mobileCreate(input: $input) {\n    message\n  }\n}": types.WalletCrypto_CreateDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Auth_firebaseLogin($input: Auth_FirebaseLoginInput!) {\n  auth_firebaseLogin(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}"): (typeof documents)["mutation Auth_firebaseLogin($input: Auth_FirebaseLoginInput!) {\n  auth_firebaseLogin(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation BankAccount_delete($input: BankAccount_DeleteInput!) {\n  bankAccount_delete(input: $input) {\n    message\n  }\n}\n\nmutation BankAccount_create($input: BankAccount_CreateInput!) {\n  bankAccount_create(input: $input) {\n    id\n    account_no\n    account_name\n    bank_name\n  }\n}\n\nquery BankAccount_getAll {\n  bankAccount_getAll {\n    id\n    account_name\n    account_no\n    bank_name\n    bankCode\n  }\n}\n\nquery BankList {\n  bankList {\n    bankCode\n    bankName\n  }\n}\n\nquery Bank_verifyAccountNo($input: BankGetAccountName_Input!) {\n  bank_verifyAccountNo(input: $input) {\n    account_name\n    account_number\n  }\n}"): (typeof documents)["mutation BankAccount_delete($input: BankAccount_DeleteInput!) {\n  bankAccount_delete(input: $input) {\n    message\n  }\n}\n\nmutation BankAccount_create($input: BankAccount_CreateInput!) {\n  bankAccount_create(input: $input) {\n    id\n    account_no\n    account_name\n    bank_name\n  }\n}\n\nquery BankAccount_getAll {\n  bankAccount_getAll {\n    id\n    account_name\n    account_no\n    bank_name\n    bankCode\n  }\n}\n\nquery BankList {\n  bankList {\n    bankCode\n    bankName\n  }\n}\n\nquery Bank_verifyAccountNo($input: BankGetAccountName_Input!) {\n  bank_verifyAccountNo(input: $input) {\n    account_name\n    account_number\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FxRate_GetAll {\n  fxRate_GetAll {\n    GH\n    NG\n    KE\n    UG\n    MW\n    TZ\n    ZA\n    USD\n    EUR\n  }\n}"): (typeof documents)["query FxRate_GetAll {\n  fxRate_GetAll {\n    GH\n    NG\n    KE\n    UG\n    MW\n    TZ\n    ZA\n    USD\n    EUR\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Kyc_addAddressInfo($input: Kyc_AddAddressInfoInput!) {\n  kyc_addAddressInfo(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addAddressProof($input: Kyc_AddAddressProofInput!) {\n  kyc_addAddressProof(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addBvnNin($input: Kyc_AddBvnNinInput!) {\n  kyc_addBvnNin(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addNames($input: Kyc_AddNamesInput!) {\n  kyc_addNames(input: $input) {\n    message\n  }\n}\n\nmutation kyc_createTransactionPin($input: Kyc_CreateTransactionPinInput!) {\n  kyc_createTransactionPin(input: $input) {\n    message\n  }\n}\n\nmutation kyc_sendPhoneOtp($input: Kyc_SendPhoneOtpInput!) {\n  kyc_sendPhoneOtp(input: $input) {\n    message\n    otpToken\n  }\n}\n\nmutation Kyc_verifyPhoneOtp($input: Kyc_verifyPhoneOtpAndInput!) {\n  Kyc_verifyPhoneOtp(input: $input) {\n    message\n  }\n}\n\nquery kyc_profile {\n  kyc_profile {\n    bvn\n    bvn_status\n    nin\n    nin_status\n    middlename\n    gender\n    lastname\n    firstname\n    country_code\n    dob\n    email\n    phone\n    role\n    state\n  }\n}"): (typeof documents)["mutation Kyc_addAddressInfo($input: Kyc_AddAddressInfoInput!) {\n  kyc_addAddressInfo(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addAddressProof($input: Kyc_AddAddressProofInput!) {\n  kyc_addAddressProof(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addBvnNin($input: Kyc_AddBvnNinInput!) {\n  kyc_addBvnNin(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addNames($input: Kyc_AddNamesInput!) {\n  kyc_addNames(input: $input) {\n    message\n  }\n}\n\nmutation kyc_createTransactionPin($input: Kyc_CreateTransactionPinInput!) {\n  kyc_createTransactionPin(input: $input) {\n    message\n  }\n}\n\nmutation kyc_sendPhoneOtp($input: Kyc_SendPhoneOtpInput!) {\n  kyc_sendPhoneOtp(input: $input) {\n    message\n    otpToken\n  }\n}\n\nmutation Kyc_verifyPhoneOtp($input: Kyc_verifyPhoneOtpAndInput!) {\n  Kyc_verifyPhoneOtp(input: $input) {\n    message\n  }\n}\n\nquery kyc_profile {\n  kyc_profile {\n    bvn\n    bvn_status\n    nin\n    nin_status\n    middlename\n    gender\n    lastname\n    firstname\n    country_code\n    dob\n    email\n    phone\n    role\n    state\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation onchain_transferToken($input: Onchain_TransferTokenInput!) {\n  onchain_transferToken(input: $input) {\n    message\n  }\n}"): (typeof documents)["mutation onchain_transferToken($input: Onchain_TransferTokenInput!) {\n  onchain_transferToken(input: $input) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Orders_CreateSell($input: Order_CreteSellInput!) {\n  orders_CreateSell(input: $input) {\n    message\n  }\n}\n\nquery Orders_GetAll($input: Order_GetAllInput!) {\n  orders_GetAll(input: $input) {\n    id\n    action_user\n    status\n    bank_id\n    currency_fiat\n    status\n    trade_type\n    action_user\n    action_merchant\n    amount_crypto\n    amount_fiat\n  }\n}\n\nmutation Orders_CreateBuy($input: Order_CreteBuyInput!) {\n  orders_CreateBuy(input: $input) {\n    message\n  }\n}\n\nquery orders_GetTransferAccount {\n  orders_GetTransferAccount {\n    bankName\n    accountNo\n    accountName\n  }\n}"): (typeof documents)["mutation Orders_CreateSell($input: Order_CreteSellInput!) {\n  orders_CreateSell(input: $input) {\n    message\n  }\n}\n\nquery Orders_GetAll($input: Order_GetAllInput!) {\n  orders_GetAll(input: $input) {\n    id\n    action_user\n    status\n    bank_id\n    currency_fiat\n    status\n    trade_type\n    action_user\n    action_merchant\n    amount_crypto\n    amount_fiat\n  }\n}\n\nmutation Orders_CreateBuy($input: Order_CreteBuyInput!) {\n  orders_CreateBuy(input: $input) {\n    message\n  }\n}\n\nquery orders_GetTransferAccount {\n  orders_GetTransferAccount {\n    bankName\n    accountNo\n    accountName\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query static_getTokens {\n  static_getTokens {\n    name\n    address\n    decimals\n    isBuyable\n    isPayable\n    symbol\n    logoUrl\n    chainId\n    priceUSD\n    priceNGN\n    rpcUrl\n    chainName\n  }\n}\n\nquery static_getLinks {\n  static_getLinks {\n    title\n    desc\n    imgLink\n    url\n    category\n    group\n  }\n}\n\nquery static_getCountry {\n  static_getCountries {\n    name\n    isoName\n    callingCodes\n    continent\n    currencyCode\n    currencyName\n    currencySymbol\n    flag\n  }\n}\n\nquery static_getChain {\n  static_getChains {\n    name\n    rpcUrl\n    chainId\n    explorerUrl\n    explorerApiUrl\n    logoUrl\n  }\n}\n\nquery static_getFundCollectors {\n  static_getFundCollectors {\n    TopUp\n    ElectricityBills\n    FundBetting\n    OffRamping\n    TV_Bills\n    WaterBills\n  }\n}\n\nquery static_appInfo {\n  static_appInfo {\n    androidAppUrl\n    iosAppUrl\n    minBuild\n    deployedBuild\n    enableAirtime\n    enableBetting\n    enableDataPlan\n    enableElectricityBillPayment\n    enableTVBillPayment\n    selfKycUrl\n    transactionsPageUrl\n    notificationsPageUrl\n  }\n}\n\nquery static_secretQuestions {\n  static_secretQuestions {\n    text\n  }\n}\n\nquery static_miniApps {\n  static_miniApps {\n    title\n    description\n    logo\n    url\n    aboutInfo\n  }\n}"): (typeof documents)["query static_getTokens {\n  static_getTokens {\n    name\n    address\n    decimals\n    isBuyable\n    isPayable\n    symbol\n    logoUrl\n    chainId\n    priceUSD\n    priceNGN\n    rpcUrl\n    chainName\n  }\n}\n\nquery static_getLinks {\n  static_getLinks {\n    title\n    desc\n    imgLink\n    url\n    category\n    group\n  }\n}\n\nquery static_getCountry {\n  static_getCountries {\n    name\n    isoName\n    callingCodes\n    continent\n    currencyCode\n    currencyName\n    currencySymbol\n    flag\n  }\n}\n\nquery static_getChain {\n  static_getChains {\n    name\n    rpcUrl\n    chainId\n    explorerUrl\n    explorerApiUrl\n    logoUrl\n  }\n}\n\nquery static_getFundCollectors {\n  static_getFundCollectors {\n    TopUp\n    ElectricityBills\n    FundBetting\n    OffRamping\n    TV_Bills\n    WaterBills\n  }\n}\n\nquery static_appInfo {\n  static_appInfo {\n    androidAppUrl\n    iosAppUrl\n    minBuild\n    deployedBuild\n    enableAirtime\n    enableBetting\n    enableDataPlan\n    enableElectricityBillPayment\n    enableTVBillPayment\n    selfKycUrl\n    transactionsPageUrl\n    notificationsPageUrl\n  }\n}\n\nquery static_secretQuestions {\n  static_secretQuestions {\n    text\n  }\n}\n\nquery static_miniApps {\n  static_miniApps {\n    title\n    description\n    logo\n    url\n    aboutInfo\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query utility_getTopUpOperators($input: Utilities_GetOperatorsInput!) {\n  utility_getTopUpOperators(input: $input) {\n    airtime {\n      name\n      suggestedAmounts\n      logo\n      maxAmount\n      minAmount\n      operatorId\n    }\n    dataPlan {\n      name\n      logo\n      operatorId\n      plans {\n        amount\n        desc\n      }\n    }\n    dataBundles {\n      name\n      logo\n      operatorId\n      plans {\n        amount\n        desc\n      }\n    }\n  }\n}"): (typeof documents)["query utility_getTopUpOperators($input: Utilities_GetOperatorsInput!) {\n  utility_getTopUpOperators(input: $input) {\n    airtime {\n      name\n      suggestedAmounts\n      logo\n      maxAmount\n      minAmount\n      operatorId\n    }\n    dataPlan {\n      name\n      logo\n      operatorId\n      plans {\n        amount\n        desc\n      }\n    }\n    dataBundles {\n      name\n      logo\n      operatorId\n      plans {\n        amount\n        desc\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Transactions_getAll {\n  transactions_getAll {\n    amount\n    category\n    mode\n    note\n    transaction_hash\n    status\n  }\n}"): (typeof documents)["query Transactions_getAll {\n  transactions_getAll {\n    amount\n    category\n    mode\n    note\n    transaction_hash\n    status\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query User_getAll {\n  user_getAll {\n    telegram_id\n    id\n    country_code\n    phone\n    firstname\n    lastname\n    middlename\n    email\n  }\n}\n\nquery user_get {\n  user_get {\n    firstname\n    lastname\n    middlename\n    email\n    country_code\n    phone\n    bvn\n    bvn_status\n    nin\n    nin_status\n    state\n    dob\n    dob_status\n    home_address\n  }\n}"): (typeof documents)["query User_getAll {\n  user_getAll {\n    telegram_id\n    id\n    country_code\n    phone\n    firstname\n    lastname\n    middlename\n    email\n  }\n}\n\nquery user_get {\n  user_get {\n    firstname\n    lastname\n    middlename\n    email\n    country_code\n    phone\n    bvn\n    bvn_status\n    nin\n    nin_status\n    state\n    dob\n    dob_status\n    home_address\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Utility_purchaseAirtime($input: Utilities_PurchaseAirtimeInput!) {\n  utility_purchaseAirtime(input: $input) {\n    title\n    subtitle\n  }\n}\n\nmutation Utility_purchaseDataBundle($input: Utilities_PurchaseDataBundleInput!) {\n  utility_purchaseDataBundle(input: $input) {\n    title\n    subtitle\n  }\n}\n\nquery ElectricityBill_getProviders($input: ElectricityBill_ProviderInput!) {\n  electricityBill_getProviders(input: $input) {\n    name\n    logo\n    category\n  }\n}\n\nmutation ElectricityBill_verifyAccount($input: ElectricityBill_ValidateAccountInput!) {\n  electricityBill_verifyAccount(input: $input) {\n    customerAddress\n    customerName\n    meterNumber\n    meterType\n    minimuVendAmount\n  }\n}\n\nmutation ElectricityBill_makePayment($input: ElectricityBill_PaymentInput!) {\n  electricityBill_makePayment(input: $input) {\n    amount\n    biller\n    bonusToken\n    chargedAmount\n    commission\n    customerId\n    transactionDate\n    unit\n  }\n}\n\nquery tvBills_getProviders($input: TvBill_GetTVProvidersInput!) {\n  tvBills_getProviders(input: $input) {\n    logo\n    category\n    name\n    slug\n  }\n}\n\nquery tvBills_getBouquet($input: TvBill_GetTVBouquetInput!) {\n  tvBills_getBouquet(input: $input) {\n    code\n    description\n    price\n  }\n}\n\nmutation tvBills_validateAccount($input: TvBill_ValidateAccountInput!) {\n  tvBills_validateAccount(input: $input) {\n    customerName\n    service\n    smartCardNumber\n  }\n}\n\nmutation tvBills_makePayment($input: TvBill_PaymentInput!) {\n  tvBills_makePayment(input: $input) {\n    amount\n    biller\n    commission\n    customerId\n    transactionId\n    transactionDate\n    customerId\n  }\n}\n\nquery fundBetting_getProviders($input: BettingProvidersInput!) {\n  fundBetting_getProviders(input: $input) {\n    logo\n    name\n  }\n}\n\nquery fundBetting_getPriceList($input: BettingProvidersInput!) {\n  fundBetting_getPriceList(input: $input) {\n    amount\n  }\n}\n\nmutation fundBetting_makePayment($input: BettingPaymentInput!) {\n  fundBetting_makePayment(input: $input) {\n    amount\n    customer_name\n    customer_username\n    customer_phone_number\n    customer_email_address\n    order_id\n    service_name\n    request_id\n  }\n}"): (typeof documents)["mutation Utility_purchaseAirtime($input: Utilities_PurchaseAirtimeInput!) {\n  utility_purchaseAirtime(input: $input) {\n    title\n    subtitle\n  }\n}\n\nmutation Utility_purchaseDataBundle($input: Utilities_PurchaseDataBundleInput!) {\n  utility_purchaseDataBundle(input: $input) {\n    title\n    subtitle\n  }\n}\n\nquery ElectricityBill_getProviders($input: ElectricityBill_ProviderInput!) {\n  electricityBill_getProviders(input: $input) {\n    name\n    logo\n    category\n  }\n}\n\nmutation ElectricityBill_verifyAccount($input: ElectricityBill_ValidateAccountInput!) {\n  electricityBill_verifyAccount(input: $input) {\n    customerAddress\n    customerName\n    meterNumber\n    meterType\n    minimuVendAmount\n  }\n}\n\nmutation ElectricityBill_makePayment($input: ElectricityBill_PaymentInput!) {\n  electricityBill_makePayment(input: $input) {\n    amount\n    biller\n    bonusToken\n    chargedAmount\n    commission\n    customerId\n    transactionDate\n    unit\n  }\n}\n\nquery tvBills_getProviders($input: TvBill_GetTVProvidersInput!) {\n  tvBills_getProviders(input: $input) {\n    logo\n    category\n    name\n    slug\n  }\n}\n\nquery tvBills_getBouquet($input: TvBill_GetTVBouquetInput!) {\n  tvBills_getBouquet(input: $input) {\n    code\n    description\n    price\n  }\n}\n\nmutation tvBills_validateAccount($input: TvBill_ValidateAccountInput!) {\n  tvBills_validateAccount(input: $input) {\n    customerName\n    service\n    smartCardNumber\n  }\n}\n\nmutation tvBills_makePayment($input: TvBill_PaymentInput!) {\n  tvBills_makePayment(input: $input) {\n    amount\n    biller\n    commission\n    customerId\n    transactionId\n    transactionDate\n    customerId\n  }\n}\n\nquery fundBetting_getProviders($input: BettingProvidersInput!) {\n  fundBetting_getProviders(input: $input) {\n    logo\n    name\n  }\n}\n\nquery fundBetting_getPriceList($input: BettingProvidersInput!) {\n  fundBetting_getPriceList(input: $input) {\n    amount\n  }\n}\n\nmutation fundBetting_makePayment($input: BettingPaymentInput!) {\n  fundBetting_makePayment(input: $input) {\n    amount\n    customer_name\n    customer_username\n    customer_phone_number\n    customer_email_address\n    order_id\n    service_name\n    request_id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation WalletCrypto_create {\n  walletCrypto_create {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}\n\nquery WalletCrypto_getAll {\n  walletCrypto_getAll {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}\n\nmutation WalletCrypto_mobileCreate($input: Wallet_CreateInput!) {\n  walletCrypto_mobileCreate(input: $input) {\n    message\n  }\n}"): (typeof documents)["mutation WalletCrypto_create {\n  walletCrypto_create {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}\n\nquery WalletCrypto_getAll {\n  walletCrypto_getAll {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}\n\nmutation WalletCrypto_mobileCreate($input: Wallet_CreateInput!) {\n  walletCrypto_mobileCreate(input: $input) {\n    message\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;